apiVersion: v1
kind: Secret
metadata:
  name: idp-cert
type: kubernetes.io/tls
data:
  {{ $idp_cert_secret := include "get_sso_config" (dict "key" "idp_cert_secret" "context" $) -}}
  {{- $idp_cert := dict "tls.crt" "" "tls.key" "" -}}

  {{- if not (include "common.secrets.exists" (dict "secret" $idp_cert_secret "context" $)) -}}
  {{- $gen_cert := genSelfSignedCert .Values.domain nil nil 3650 -}}
  {{- $_ := set $idp_cert "tls.crt" ($gen_cert.Cert | replace "\n" "" | trimPrefix "-----BEGIN CERTIFICATE-----" | trimSuffix "-----END CERTIFICATE-----" | b64enc) -}}
  {{- $_ := set $idp_cert "tls.key" ($gen_cert.Key | replace "\n" "" | trimPrefix "-----BEGIN RSA PRIVATE KEY-----" | trimSuffix "-----END RSA PRIVATE KEY-----" | b64enc) -}}
  {{- else -}}
  {{- $idp_cert = (lookup "v1" "Secret" .Release.Namespace $idp_cert_secret).data -}}
  {{- end -}}

  tls.crt: {{ index $idp_cert "tls.crt" }}
  tls.key: {{ index $idp_cert "tls.key" }}
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloak
      version: '9.3.2'
      sourceRef:
        kind: HelmRepository
        name: bitnami
  timeout: 10m0s # Increase timeout to be sure.
  valuesFrom:
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: keycloak_admin_pw
      targetPath: "auth.adminPassword"
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: keycloak_admin_pw
      targetPath: "auth.managementPassword"
  values:
    auth:
      adminUser: admin
      managementUser: admin
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hostname: {{ .Values.hosts.keycloak }}
      tls: true
    service:
      type: ClusterIP
    postgresql:
      primary:
        persistence:
          size: 4Gi
      readReplicas:
        persistence:
          size: 4Gi
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak-config
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloak-config-cli
      version: '1.2.3'
      sourceRef:
        kind: HelmRepository
        name: jkroepke
  timeout: 10m0s # Increase timeout to be sure.
  dependsOn:
    - name: keycloak
  valuesFrom:
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: keycloak_admin_pw
      targetPath: "secrets.KEYCLOAK_PASSWORD"
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: ldap_admin_pw
      targetPath: "config.master.inline.components.org\\.keycloak\\.storage\\.UserStorageProvider[0].config.bindCredential[0]"
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: internal_oidc_client_secret
      targetPath: "config.master.inline.identityProviders[0].config.clientSecret"
    - kind: Secret
      name: {{ .Values.configSecretName }}
      valuesKey: internal_oidc_client_secret
      targetPath: "config.master.inline.clients[0].secret"
  values:
    image:
      tag: "5.2.0-18.0.0"
    env: 
      KEYCLOAK_URL: {{ printf "https://%s" .Values.hosts.keycloak }}
      KEYCLOAK_USER: admin
      IMPORT_FILES_LOCATIONS: "/config/master.json"
      IMPORT_MANAGED_CLIENT: "no-delete" # Do not delete existing clients, just add new ones
      KEYCLOAK_AVAILABILITYCHECK_ENABLED: "true" # Wait until Keycloak is available
      KEYCLOAK_AVAILABILITYCHECK_TIMEOUT: "60s"
    config: 
      master:
        inline:
          enabled: true
          realm: master
          registrationAllowed: true
          registrationEmailAsUsername: false
          rememberMe: true
          verifyEmail: true
          loginWithEmailAllowed: true
          duplicateEmailsAllowed: false
          resetPasswordAllowed: true
          editUsernameAllowed: false
          accessTokenLifespan: 600
          accessTokenLifespanForImplicitFlow: 1200
          ssoSessionIdleTimeout: 7200
          ssoSessionMaxLifespan: 86400
          ssoSessionIdleTimeoutRememberMe: 604800
          ssoSessionMaxLifespanRememberMe: 5184000
          offlineSessionIdleTimeout: 5184000
          adminEventsEnabled: true
          adminEventsDetailsEnabled: true
          internationalizationEnabled: true
          defaultLocale: {{ index (.Values.org.defaultLocale | splitList "_") 0 }}
          displayName: {{ printf "%s Login" .Values.org.name }}
          displayNameHtml: {{ printf "<div class=\"kc-logo-text\"><span>%s Login</span></div>" .Values.org.name }}
          smtpServer:
            port: {{ .Values.smtp.port | quote }}
            host: {{ .Values.smtp.host }}
            {{ if eq .Values.smtp.tlsMode "ssl" -}}
            ssl: 'true'
            {{- else -}}
            starttls: 'true'
            {{- end }}
            auth: 'true'
            from: {{ .Values.smtp.senderAddress }}
            user: {{ .Values.smtp.login | quote }}
            password: {{ .Values.smtp.password | quote }}
          components:
            org.keycloak.keys.KeyProvider:
              - name: "rsa"
                providerId: "rsa"
                subComponents: {}
                config: 
                  privateKey:
                    - {{ index $idp_cert "tls.key" | b64dec | quote }}
                  certificate:
                    - {{ index $idp_cert "tls.crt" | b64dec | quote }} 
                  priority: ["200"] 
                  algorithm: ["RS256"]
              - name: "aes-generated"
                providerId: "aes-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
              - name: "rsa-enc-generated"
                providerId: "rsa-enc-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
                  algorithm: ["RSA-OAEP"]
              - name: "hmac-generated"
                providerId: "hmac-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
                  algorithm: ["HS256"]
            org.keycloak.storage.UserStorageProvider:
              - id: ldap
                name: ldap
                providerId: ldap
                subComponents:
                  org.keycloak.storage.ldap.mappers.LDAPStorageMapper:
                    - name: last name
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - sn
                        is.mandatory.in.ldap:
                          - "true"
                        read.only:
                          - "false"
                        always.read.value.from.ldap:
                          - "true"
                        user.model.attribute:
                          - lastName
                    - name: first name
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - givenName
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "false"
                        user.model.attribute: 
                          - firstName
                    - name: creation date
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - createTimestamp
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "true"
                        user.model.attribute: 
                          - createTimestamp
                    - name: modify date
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - modifyTimestamp
                        is.mandatory.in.ldap: 
                          - "false"
                        read.only: 
                          - "true"
                        always.read.value.from.ldap: 
                          - "true"
                        user.model.attribute: 
                          - modifyTimestamp
                    - name: email
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - mail
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "false"
                        user.model.attribute: 
                          - email
                    - name: fullname
                      providerId: full-name-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.full.name.attribute:
                          - cn
                        read.only: 
                          - "false"
                        write.only:
                          - "true"
                    - name: groups
                      providerId: group-ldap-mapper
                      config:
                        drop.non.existing.groups.during.sync:
                          - "false"
                        group.name.ldap.attribute:
                          - cn
                        group.object.classes:
                          - {{ include "get_sso_config" (dict "key" "ldap_groups_class" "context" $) }}
                        groups.dn:
                          - {{ include "get_sso_config" (dict "key" "ldap_groups_dn" "context" $) }}
                        groups.ldap.filter: []
                        groups.path:
                          - /
                        ignore.missing.groups:
                          - "false"
                        mapped.group.attributes: []
                        memberof.ldap.attribute:
                          - memberOf
                        membership.attribute.type:
                          - DN
                        membership.ldap.attribute:
                          - member
                        membership.user.ldap.attribute:
                          - uid
                        mode:
                          - LDAP_ONLY
                        preserve.group.inheritance:
                          - "true"
                        user.roles.retrieve.strategy:
                          - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                    - name: roles
                      providerId: role-ldap-mapper
                      config:
                        client.id: []
                        role.name.ldap.attribute:
                          - cn
                        role.object.classes:
                          - {{ include "get_sso_config" (dict "key" "ldap_roles_class" "context" $) }}
                        roles.dn:
                          - {{ include "get_sso_config" (dict "key" "ldap_roles_dn" "context" $) }}
                        roles.ldap.filter: []
                        memberof.ldap.attribute:
                          - memberOf
                        membership.attribute.type:
                          - DN
                        membership.ldap.attribute:
                          - member
                        membership.user.ldap.attribute:
                          - uid
                        mode:
                          - LDAP_ONLY
                        use.realm.roles.mapping:
                          - "true"
                        user.roles.retrieve.strategy:
                          - LOAD_ROLES_BY_MEMBER_ATTRIBUTE
                config: 
                  pagination: 
                    - "true"
                  fullSyncPeriod: 
                    - "600"
                  connectionPooling: 
                    - "true"
                  usersDn:
                    - {{ include "get_sso_config" (dict "key" "ldap_users_dn" "context" $) }}
                  cachePolicy: 
                    - DEFAULT
                  useKerberosForPasswordAuthentication: 
                    - "false"
                  importEnabled: 
                    - "true"
                  enabled: 
                    - "true"
                  usernameLDAPAttribute: 
                    - uid
                  bindDn: 
                    - {{ include "get_sso_config" (dict "key" "ldap_admin_dn" "context" $) }}
                  bindCredential: 
                    - {{ include "get_sso_config" (dict "key" "ldap_admin_pw" "context" $) }}
                  changedSyncPeriod: 
                    - "-1"
                  vendor: 
                    - "other"
                  uuidLDAPAttribute: 
                    - "entryUUID"
                  connectionUrl: 
                    - {{ printf "ldap://openldap.%s.svc.cluster.local:389" .Release.Namespace }}
                  allowKerberosAuthentication: 
                    - "false"
                  syncRegistrations: 
                    - "true"
                  authType: 
                    - simple
                  debug: 
                    - "false"
                  searchScope: 
                    - "1"
                  useTruststoreSpi: 
                    - ldapsOnly
                  priority: 
                    - "0"
                  trustEmail: 
                    - "false"
                  userObjectClasses: 
                    - {{ include "get_sso_config" (dict "key" "ldap_users_class" "context" $) }}
                  rdnLDAPAttribute: 
                    - uid
                  editMode: 
                    - WRITABLE
                  validatePasswordPolicy: 
                    - "false"
                  batchSizeForSync: 
                    - "1000"
          groups: 
            - name: {{ include "get_sso_config" (dict "key" "admin_group" "context" $) }}
              realmRoles: 
                - admin
              attributes:
                is_admin: ["true"]
          users:
            - username: admin
              enabled: true
              emailVerified: true
              requiredActions: []
              realmRoles:
                - admin
                - create-realm
                - default-roles-master
          identityProviders:
            - alias: admin-oidc
              displayName: "Admin OIDC"
              providerId: oidc
              enabled: true
              trustEmail: true
              # firstBrokerLoginFlowAlias: "first broker login"
              # storeToken: false
              # authenticateByDefault: false
              # linkOnly: false
              config:
                clientId: admin-oidc
                clientAuthMethod: client_secret_post
                clientSecret: {{ include "get_sso_config" (dict "key" "internal_oidc_client_secret" "context" $) }}
                tokenUrl: {{ include "urls.dex_oidc_token" . }}
                authorizationUrl: {{ include "urls.dex_oidc_auth" . }}
                validateSignature: "true"
                useJwksUrl: "true"
                jwksUrl: {{ include "urls.dex_oidc_jwks" . }}
                syncMode: FORCE
                defaultScope: "email groups profile openid"
                guiOrder: 0
                # backchannelSupported: true
          identityProviderMappers:
            - name: admin-oidc-email-mapper
              identityProviderAlias: admin-oidc
              identityProviderMapper: "oidc-user-attribute-idp-mapper"
              config:
                claim: email
                user.attribute: email
                # syncMode: FORCE
            - name: admin-oidc-group-mapper
              identityProviderAlias: admin-oidc
              identityProviderMapper: "oidc-advanced-group-idp-mapper"
              config:
                claims: {{ printf "[{\"key\": \"groups\",\"value\": %s}]" (.Values.admin.group | quote) | quote }}
                group: {{ .Values.admin.group | quote }}
                # syncMode: FORCE
          clientScopes:
            - name: groups
              protocol: openid-connect
              attributes:
                display.on.consent.screen: "true"
                include.in.token.scope": "true"
              protocolMappers:
                - name: groups
                  protocol: openid-connect
                  protocolMapper: oidc-group-membership-mapper
                  config: 
                    full.path: "false"
                    id.token.claim: "true"
                    access.token.claim: "true"
                    userinfo.token.claim: "true"
                    claim.name: groups
            - name: is_admin
              protocol: openid-connect
              attributes:
                display.on.consent.screen: "true"
                include.in.token.scope": "true"
              protocolMappers:
                - name: is_admin
                  protocol: openid-connect
                  protocolMapper: oidc-usermodel-attribute-mapper
                  consentRequired: false
                  config:
                    userinfo.token.claim: 'true'
                    user.attribute: is_admin
                    id.token.claim: 'true'
                    access.token.claim: 'true'
                    claim.name: is_admin
                    jsonType.label: boolean
                    multivalued: 'false'
                    aggregate.attrs: ''
          clients:
            - clientId: {{ include "get_sso_config" (dict "key" "internal_oidc_client_id" "context" $) }}
              name: {{ include "get_sso_config" (dict "key" "internal_oidc_client_id" "context" $) }}
              description: "Internal OIDC client"
              enabled: true
              clientAuthenticatorType: client-secret
              secret: {{ include "get_sso_config" (dict "key" "internal_oidc_client_secret" "context" $) }}
              redirectUris: 
                - {{ include "urls.authproxy_callback" . }}
                - http://localhost:8000 # For kubelogin
                - http://localhost:18000 # For kubelogin
              webOrigins: 
                - "*"
              defaultClientScopes:
                - email
                - profile
              optionalClientScopes:
                - groups
                - roles
                - is_admin
